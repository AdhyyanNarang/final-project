import os
import ipfsapi
import web3
from web3 import TestRPCProvider, Web3, EthereumTesterProvider
from web3.contract import ConciseContract

api = ipfsapi.connect('127.0.0.1', 5001)
contract_abi = [{"constant":False,"inputs":[{"name":"_projectName","type":"string"}],"name":"getCurr","outputs":[{"name":"","type":"uint256"}],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"},{"name":"_version","type":"int256"}],"name":"ownerPull","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"},{"name":"_isPublic","type":"bool"}],"name":"init","outputs":[],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"}],"name":"exists","outputs":[{"name":"","type":"bool"}],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"}],"name":"getHash","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"}],"name":"remove","outputs":[],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"},{"name":"_projectHash","type":"string"}],"name":"commit","outputs":[],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"},{"name":"_projectOwner","type":"address"}],"name":"guestPull","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"nonpayable","type":"function"},{"constant":False,"inputs":[{"name":"_projectName","type":"string"},{"name":"_pastcommit","type":"uint256"}],"name":"getHist","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"nonpayable","type":"function"},{"payable":True,"stateMutability":"payable","type":"fallback"}]
contract_bytecode = "6060604052341561000f57600080fd5b6116708061001e6000396000f300606060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063058033371461009e57806305ceef481461010f5780631484a465146101ee578063261a323e146102565780635b6beeb9146102cb57806380599e4b146103a157806381d14ffc146103fe578063832eb14e1461049e578063da2e75ec14610593575b600080fd5b34156100a957600080fd5b6100f9600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610672565b6040518082815260200191505060405180910390f35b341561011a57600080fd5b610173600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610726565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b3578082015181840152602081019050610198565b50505050905090810190601f1680156101e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f957600080fd5b610254600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803515159060200190919050506109fd565b005b341561026157600080fd5b6102b1600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610cf8565b604051808215151515815260200191505060405180910390f35b34156102d657600080fd5b610326600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610db9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036657808201518184015260208101905061034b565b50505050905090810190601f1680156103935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ac57600080fd5b6103fc600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610f0b565b005b341561040957600080fd5b61049c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506110bb565b005b34156104a957600080fd5b610518600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561055857808201518184015260208101905061053d565b50505050905090810190601f1680156105855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059e57600080fd5b6105f7600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919050506113df565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063757808201518184015260208101905061061c565b50505050905090810190601f1680156106645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b6020831015156106e857805182526020820191506020810190506020830392506106c3565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201549050919050565b61072e611543565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156108a0576000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b6020831015156107ca57805182526020820191506020810190506020830392506107a5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108945780601f1061086957610100808354040283529160200191610894565b820191906000526020600020905b81548152906001019060200180831161087757829003601f168201915b505050505090506109f7565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b60208310151561091457805182526020820191506020810190506020830392506108ef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ef5780601f106109c4576101008083540402835291602001916109ef565b820191906000526020600020905b8154815290600101906020018083116109d257829003601f168201915b505050505090505b92915050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b602083101515610a715780518252602082019150602081019050602083039250610a4c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160009054906101000a900460ff1615610abf57600080fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b602083101515610b355780518252602082019150602081019050602083039250610b10565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548160ff02191690831515021790555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b602083101515610bf85780518252602082019150602081019050602083039250610bd3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020181905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b602083101515610ca75780518252602082019150602081019050602083039250610c82565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160016101000a81548160ff0219169083151502179055505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b602083101515610d6e5780518252602082019150602081019050602083039250610d49565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160009054906101000a900460ff169050919050565b610dc1611543565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b602083101515610e355780518252602082019150602081019050602083039250610e10565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b50505050509050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b602083101515610f815780518252602082019150602081019050602083039250610f5c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548160ff0219169083151502179055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816040518082805190602001908083835b602083101515611042578051825260208201915060208101905060208303925061101d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600080820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690556001820160006110ae9190611557565b6002820160009055505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b602083101515611131578051825260208201915060208101905060208303925061110c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060018160020160008282540192505081905550818160030160008360020154815260200190815260200160002090805190602001906111a692919061159f565b50818160010190805190602001906111bf92919061159f565b50505050565b6111cd611543565b82826000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b602083101515611243578051825260208201915060208101905060208303925061121e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160019054906101000a900460ff16151561129257600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518082805190602001908083835b60208310151561130657805182526020820191506020810190506020830392506112e1565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113d05780601f106113a5576101008083540402835291602001916113d0565b820191906000526020600020905b8154815290600101906020018083116113b357829003601f168201915b50505050509250505092915050565b6113e7611543565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040518082805190602001908083835b60208310151561145b5780518252602082019150602081019050602083039250611436565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115365780601f1061150b57610100808354040283529160200191611536565b820191906000526020600020905b81548152906001019060200180831161151957829003601f168201915b5050505050905092915050565b602060405190810160405280600081525090565b50805460018160011615610100020316600290046000825580601f1061157d575061159c565b601f01602090049060005260206000209081019061159b919061161f565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115e057805160ff191683800117855561160e565b8280016001018555821561160e579182015b8281111561160d5782518255916020019190600101906115f2565b5b50905061161b919061161f565b5090565b61164191905b8082111561163d576000816000905550600101611625565b5090565b905600a165627a7a7230582018abc2f3f9cca19ce6516e3ec6bc2aaaa96452360dc5963963f24dd09d57c8990029"
w3 = Web3(EthereumTesterProvider())
contract = w3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
tx_hash = contract.deploy(transaction={'from': w3.eth.accounts[0]})
contract_address = w3.eth.getTransactionReceipt(tx_hash)['contractAddress']
masterstorage = w3.eth.contract(contract_abi, contract_address, ContractFactoryClass=ConciseContract)



for i in range(len(w3.eth.accounts)):
	print(str(i) + ":",w3.eth.accounts[i])
account =  w3.eth.accounts[int(input("Choose an account (enter a number): "))]


projects = []
staged = ""

while True:
	
	line = input('> ').split()

	if len(line) <= 1:
		continue

	if line[0] != 'dgit':
		print("Invalid command")
		continue

	# stores project name in projects file
	if line[1] == "init" and len(line) <= 4:


		if line[2] in projects:
			print("Project already exists")
			continue

		projects.append(line[2])

		public = True
		if len(line) == 4 and line[3] == "private":
		 	public = False

		masterstorage.init(line[2], public, transact = {'from': account})
		print("Project {0} initialized".format(line[2]))

	# stages a project that is ready to be committed
	elif line[1] == "add" and len(line) == 3:
		if line[2] not in projects:
			print("Project {0} does not exist".format(line[2]))
		else:
			staged = line[2]
			print("Project {0} added".format(line[2]))

	# commits the project by adding it to Ethereum/ipfs
	elif line[1] == "commit" and staged:
		res = api.add("projects/" + staged, recursive=True)
		masterstorage.commit(staged, res[0]['Hash'], transact = {'from': account})
		print("Project {0} committed".format(line[2]))

	# queries Ethereum network for hash and downloads file from ipfs
	elif line[1] == "pull":
		if len(line) == 3:
			version = -1
		elif len(line) == 4:
			version = line[4]
		else:
			print("Invalid command")
			continue	
		name = line[2]
		if name not in projects:
			print("Project does not exist")
			continue
		hash = masterstorage.ownerPull(name,version, call={'from': account})
		api.get(hash)
		print("Project {0} downloaded in current directory".format(name))

	# removes the project from the list and ethereum network
	elif line[1] == "remove" and len(line) == 3:

		if line[2] in projects:
			projects.remove(line[2])
			masterstorage.remove("name", transact = {'from': account})
			print("Project {0} removed".format(line[2]))
		else:
			print("Project does not exist")

	else: 
		print("Invalid command")








